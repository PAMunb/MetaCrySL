/**
 * generated by Xtext 2.22.0
 */
package br.unb.cic.mcsl.metaCrySL.impl;

import br.unb.cic.mcsl.metaCrySL.AggregateList;
import br.unb.cic.mcsl.metaCrySL.ChoiceExp;
import br.unb.cic.mcsl.metaCrySL.ConstraintSpec;
import br.unb.cic.mcsl.metaCrySL.ConstraintsExp;
import br.unb.cic.mcsl.metaCrySL.Event;
import br.unb.cic.mcsl.metaCrySL.EventAggregate;
import br.unb.cic.mcsl.metaCrySL.EventExp;
import br.unb.cic.mcsl.metaCrySL.EventMethod;
import br.unb.cic.mcsl.metaCrySL.EventSpec;
import br.unb.cic.mcsl.metaCrySL.Formal;
import br.unb.cic.mcsl.metaCrySL.FormalArg;
import br.unb.cic.mcsl.metaCrySL.FormalArgs;
import br.unb.cic.mcsl.metaCrySL.MetaCrySLFactory;
import br.unb.cic.mcsl.metaCrySL.MetaCrySLPackage;
import br.unb.cic.mcsl.metaCrySL.MethodDef;
import br.unb.cic.mcsl.metaCrySL.Model;
import br.unb.cic.mcsl.metaCrySL.ObjectSpec;
import br.unb.cic.mcsl.metaCrySL.OneOrMore;
import br.unb.cic.mcsl.metaCrySL.Optional;
import br.unb.cic.mcsl.metaCrySL.OrderSpec;
import br.unb.cic.mcsl.metaCrySL.SequenceExp;
import br.unb.cic.mcsl.metaCrySL.Spec;
import br.unb.cic.mcsl.metaCrySL.Wildcard;
import br.unb.cic.mcsl.metaCrySL.ZeroOrMore;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class MetaCrySLFactoryImpl extends EFactoryImpl implements MetaCrySLFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static MetaCrySLFactory init()
  {
    try
    {
      MetaCrySLFactory theMetaCrySLFactory = (MetaCrySLFactory)EPackage.Registry.INSTANCE.getEFactory(MetaCrySLPackage.eNS_URI);
      if (theMetaCrySLFactory != null)
      {
        return theMetaCrySLFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new MetaCrySLFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MetaCrySLFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case MetaCrySLPackage.MODEL: return createModel();
      case MetaCrySLPackage.SPEC: return createSpec();
      case MetaCrySLPackage.OBJECT_SPEC: return createObjectSpec();
      case MetaCrySLPackage.OBJECT: return createObject();
      case MetaCrySLPackage.EVENT_SPEC: return createEventSpec();
      case MetaCrySLPackage.EVENT: return createEvent();
      case MetaCrySLPackage.AGGREGATE_LIST: return createAggregateList();
      case MetaCrySLPackage.METHOD_DEF: return createMethodDef();
      case MetaCrySLPackage.FORMAL_ARGS: return createFormalArgs();
      case MetaCrySLPackage.FORMAL_ARG: return createFormalArg();
      case MetaCrySLPackage.ORDER_SPEC: return createOrderSpec();
      case MetaCrySLPackage.EVENT_EXP: return createEventExp();
      case MetaCrySLPackage.CONSTRAINT_SPEC: return createConstraintSpec();
      case MetaCrySLPackage.CONSTRAINTS_EXP: return createConstraintsExp();
      case MetaCrySLPackage.EVENT_METHOD: return createEventMethod();
      case MetaCrySLPackage.EVENT_AGGREGATE: return createEventAggregate();
      case MetaCrySLPackage.WILDCARD: return createWildcard();
      case MetaCrySLPackage.FORMAL: return createFormal();
      case MetaCrySLPackage.OPTIONAL: return createOptional();
      case MetaCrySLPackage.ZERO_OR_MORE: return createZeroOrMore();
      case MetaCrySLPackage.ONE_OR_MORE: return createOneOrMore();
      case MetaCrySLPackage.CHOICE_EXP: return createChoiceExp();
      case MetaCrySLPackage.SEQUENCE_EXP: return createSequenceExp();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Spec createSpec()
  {
    SpecImpl spec = new SpecImpl();
    return spec;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ObjectSpec createObjectSpec()
  {
    ObjectSpecImpl objectSpec = new ObjectSpecImpl();
    return objectSpec;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public br.unb.cic.mcsl.metaCrySL.Object createObject()
  {
    ObjectImpl object = new ObjectImpl();
    return object;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EventSpec createEventSpec()
  {
    EventSpecImpl eventSpec = new EventSpecImpl();
    return eventSpec;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Event createEvent()
  {
    EventImpl event = new EventImpl();
    return event;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AggregateList createAggregateList()
  {
    AggregateListImpl aggregateList = new AggregateListImpl();
    return aggregateList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MethodDef createMethodDef()
  {
    MethodDefImpl methodDef = new MethodDefImpl();
    return methodDef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FormalArgs createFormalArgs()
  {
    FormalArgsImpl formalArgs = new FormalArgsImpl();
    return formalArgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FormalArg createFormalArg()
  {
    FormalArgImpl formalArg = new FormalArgImpl();
    return formalArg;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OrderSpec createOrderSpec()
  {
    OrderSpecImpl orderSpec = new OrderSpecImpl();
    return orderSpec;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EventExp createEventExp()
  {
    EventExpImpl eventExp = new EventExpImpl();
    return eventExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConstraintSpec createConstraintSpec()
  {
    ConstraintSpecImpl constraintSpec = new ConstraintSpecImpl();
    return constraintSpec;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConstraintsExp createConstraintsExp()
  {
    ConstraintsExpImpl constraintsExp = new ConstraintsExpImpl();
    return constraintsExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EventMethod createEventMethod()
  {
    EventMethodImpl eventMethod = new EventMethodImpl();
    return eventMethod;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EventAggregate createEventAggregate()
  {
    EventAggregateImpl eventAggregate = new EventAggregateImpl();
    return eventAggregate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Wildcard createWildcard()
  {
    WildcardImpl wildcard = new WildcardImpl();
    return wildcard;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Formal createFormal()
  {
    FormalImpl formal = new FormalImpl();
    return formal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Optional createOptional()
  {
    OptionalImpl optional = new OptionalImpl();
    return optional;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ZeroOrMore createZeroOrMore()
  {
    ZeroOrMoreImpl zeroOrMore = new ZeroOrMoreImpl();
    return zeroOrMore;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OneOrMore createOneOrMore()
  {
    OneOrMoreImpl oneOrMore = new OneOrMoreImpl();
    return oneOrMore;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ChoiceExp createChoiceExp()
  {
    ChoiceExpImpl choiceExp = new ChoiceExpImpl();
    return choiceExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SequenceExp createSequenceExp()
  {
    SequenceExpImpl sequenceExp = new SequenceExpImpl();
    return sequenceExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MetaCrySLPackage getMetaCrySLPackage()
  {
    return (MetaCrySLPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static MetaCrySLPackage getPackage()
  {
    return MetaCrySLPackage.eINSTANCE;
  }

} //MetaCrySLFactoryImpl
