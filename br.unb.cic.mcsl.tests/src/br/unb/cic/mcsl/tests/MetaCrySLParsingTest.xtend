/*
 * generated by Xtext 2.22.0
 */
package br.unb.cic.mcsl.tests

import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.junit.Assert
import org.junit.Test
import org.junit.runner.RunWith

@RunWith(XtextRunner)
@InjectWith(MetaCrySLInjectorProvider)
class MetaCrySLParsingTest extends MetaCrySLAbstractTests {

	@Test
	def void loadOnlySpecModelWithoutObjects() {
		val file = super.readFileIntoString(BR_UNB_CIC_METACRYSL_TESTS_FILES + "basicModelWithoutObjects.cryptsl")
		
		val result = super.parseHelper.parse(file)
		Assert.assertNotNull(result)
		val errors = result.eResource.errors
		Assert.assertTrue('''Unexpected errors: «errors.join(", ")»''', !errors.isEmpty)
	}

	@Test
	def void loadOnlySpecModelWithoutAbstract() {
		val file = super.readFileIntoString(BR_UNB_CIC_METACRYSL_TESTS_FILES + "basicModelWithoutAbstract.cryptsl")
		
		val result = super.parseHelper.parse(file)
		Assert.assertNotNull(result)
		val errors = result.eResource.errors
		Assert.assertTrue('''Unexpected errors: «errors.join(", ")»''', errors.isEmpty)
	}
	
	@Test
	def void loadBasicModel() {
		val file = super.readFileIntoString(BR_UNB_CIC_METACRYSL_TESTS_FILES + "basicModel.cryptsl")
		val result = super.parseHelper.parse(file)
		Assert.assertNotNull(result)
		val errors = result.eResource.errors
		Assert.assertTrue('''Unexpected errors: «errors.join(", ")»''', errors.isEmpty)
	}
	
	@Test
	def void loadBasicModelWithOrderClause() {
		val file = super.readFileIntoString(BR_UNB_CIC_METACRYSL_TESTS_FILES + "basicModelWithOrderClause.cryptsl")
		val result = super.parseHelper.parse(file)		
		Assert.assertNotNull(result)
		val errors = result.eResource.errors
		Assert.assertTrue('''Unexpected errors: «errors.join(", ")»''', errors.isEmpty)
	}
	
	@Test
	def void loadBasicModelWithForbiddenClause() {
		val file = super.readFileIntoString(BR_UNB_CIC_METACRYSL_TESTS_FILES + "basicModelWithForbiddenClause.cryptsl")
		val result = super.parseHelper.parse(file)		
		Assert.assertNotNull(result)
		val errors = result.eResource.errors
		Assert.assertTrue('''Unexpected errors: «errors.join(", ")»''', errors.isEmpty)
	}
	
	@Test
	def void loadBasicModelWithConstraintClause() {
	var result = parseHelper.parse('''
		ABSTRACT SPEC java.lang.String
		OBJECTS:
		   java.lang.String foo;
		
		EVENTS
		   c1 : method1();
		   c2 : method2(int, int);
		   c3 : method2(_);
		   cs := c1 | c2 ;
		ORDER
		   cs | (c1, c2)*    
		   
		CONSTRAINTS
			foo in {"bar", "woo"};
	''')
	Assert.assertNotNull(result)
	val errors = result.eResource.errors
	Assert.assertTrue('''Unexpected errors: «errors.join(", ")»''', errors.isEmpty)
	}
}
