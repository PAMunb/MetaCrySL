grammar br.unb.cic.mcsl.MetaCrySL with org.eclipse.xtext.xbase.Xtype

generate metaCrySL "http://www.unb.br/cic/mcsl/MetaCrySL"

Model
 : {MetaCrySL} spec = Spec 
 | {Refinement} refinement = Refinement 
 | {Configuration} configuration = Configuration 
 ;

/* Spec rule 
 * 
 * This is the start symbol of our MetaCrySL grammar. 
 * In MetaCrySL, we can annotate a specification
 * as being abstract and a spec can also refer to an 
 * abstract type. Each specification comprises 
 * (or might comprise) definitions for object 
 * declarations, events and order, constraints, 
 * and so on. 
 */	
Spec
 : 'ABSTRACT'? 'SPEC' classType = BaseSpecType
     objectSpec    = ObjectSpec
     (forbiddenSpec = ForbiddenSpec)?
     eventSpec     = EventSpec
     orderSpec     = OrderSpec
     (constraintSpec = ConstraintSpec)?
     (requireSpec = RequireSpec)?
     (ensureSpec = EnsureSpec)?
     (negateSpec = NegateSpec)?     
 ;
 
BaseSpecType 
 : {SimpleType} typeName = QualifiedName
 | {ParameterizedType} typeName = QualifiedName '<' typeParameter = ID '>'	     
 ; 
    
/* ObjectSpec rule
 * 
 * It corresponds to the declaration of the 
 * variables (names) used throughout the 
 * specification. 
 */    
ObjectSpec: {ObjectSpec} 'OBJECTS' objects += Object+ ;    

/* Object rule
 * 
 * Allows the specification of a typed 
 * variable that can be used in the remaining 
 * sections of the specification. 
 */
Object: {Object} ((ObjectType = QualifiedName) | ("<"ObjectTypeParam = ValidID">")) ObjectName = ID ';' ;

/* ForbiddenSpec */
ForbiddenSpec: {ForbiddenSpec} 'FORBIDDEN' forbidenMethods += ForbiddenMethod+;

ForbiddenMethod: {Forbidden} method = ID '(' (args ?= FormalArgs)? ')' ('=>' alternative ?= ID)? ';';

/* EventSpec rule 
 * 
 * This rule defines the EVENTS session. It should accept 
 * the following: 
 *  
 *   EVENTS: 
 *     c1 : method1();           //event method
 *     c2 : method2(int x);      //event method
 *     
 *     cs := c1 | c2 ;           //event aggregate
 */
EventSpec : {EventSpec} 'EVENTS' events += Event+ ;

/* Event rule
 * 
 * An event is either a labeled method or an 
 * aggregation of labels. Note that we can assign 
 * a 'method call' to a variable. 
 */
Event
 : {EventMethod}    (label = ID ':') (var = ID '=')? method = MethodDef ';'
 | {EventAggregate} (label = ID ':=') aggregate = AggregateList ';'	
 ;

/* AggregateList rule. 
 * 
 * Represents a list of labels: 'l1 | l2 | l3'
 */
AggregateList : labels += ID ('|' labels+=ID)*;

/* MethodDef rule. 
 * 
 * It should accept 'method()' or method(int x, int y)
 * 
 * (note) 
 * this way to express lists, with a list 
 * separator in XText, is really weird. 
 */
MethodDef: methodName = ID '(' (args ?= FormalArgs?) ')' ;

/* FormalArgs rule
 * 
 * Represents a list of formal arguments. 
 */
FormalArgs: args += FormalArg (',' args += FormalArg)* ;

/* FormalArg rule
 * 
 * It should accept a wild card ('_') or something like 'int x'  
 */
FormalArg: 
	({Wildcard} '_' | {Formal} (argument = JvmArgumentTypeReference));
 

/* OrderSpec rule
 * 
 * Uses a regular expression on the labeled 
 * events. 
 */
 
OrderSpec: {OrderSpec} 'ORDER' order = EventExp ; 

/* EventExp 
 * 
 * An expression language to declare the order of events 
 * (or method calls). This order resembles a regular 
 * expression. 
 *  
 * Here we use a well-known idiom to avoid left-recursion in 
 * grammars, named left-factoring.  
 * 
 * Specifically to the context of XText, this video 
 * might be useful to understand this design: 
 * 
 * https://www.youtube.com/watch?v=d3JymwcB_TM&feature=youtu.be
 * 
 * Note: It was necessary to allow the backtrack feature 
 * here. Take a look at the mwe2 file. Backtracking might 
 * be quite expensive, so perhaps we should investigate an 
 * alternative to this design.  
 */
EventExp 
 :  ChoiceExp ;

ChoiceExp returns EventExp
 : SequenceExp => ({ChoiceExp.left = current} '|' right = SequenceExp)*;
 
SequenceExp returns EventExp
 : BasicEventExp => ({SequenceExp.left = current} ',' right = BasicEventExp)*;

BasicEventExp
 : {Optional}    exp = PrimaryExp '?'
 | {ZeroOrMore}  exp = PrimaryExp '*' 
 | {OneOrMore}   exp = PrimaryExp '+'	
 | {PrimaryExp}  exp = PrimaryExp 
 ;  
 
PrimaryExp returns EventExp
 : label = ID
 | '(' ChoiceExp ')' 	
 ;  
 
/* ConstraintSpec rule
 * 
 * Defines constraints for objects defined under OBJECTS clause
 * and used as parameters or return values in the EVENTS section
*/

ConstraintSpec : {ConstraintSpec} 'CONSTRAINTS' constraints += Constraint+;

Constraint : exp = ConstraintExp ';';

ConstraintExp : ImpliesExp; 

/*
 * The set of boolean expressions. I think that the precedence should
 * be as follows. 
 * 
 * a || b && c => d  ==   (a || (b && c)) => d
 * 
 * That is, the precedence must be: (&&) has higher 
 * precedence than (||) that has greater precedence than 
 * (=>) 
 */
 
BooleanExp : ImpliesExp;
  
ImpliesExp returns ConstraintExp
 : DisjunctionExp ({ImpliesExp.left = current} '=>' right = DisjunctionExp)*;

DisjunctionExp returns ConstraintExp
 : ConjunctionExp ({DisjunctionExp.left = current} '||' right = ConjunctionExp)*;

ConjunctionExp returns ConstraintExp
 : RelationalExp ({ConjunctionExp.left = current} '&&' right = RelationalExp)*;

/*  
 * The relational expressions. They all have the same priority.  
 */
RelationalExp returns ConstraintExp
 : ArithmeticExp ({RelationalExp.left = current} operator = ('<' | '>' | '<=' | '>=' | '==' | '!=') right = ArithmeticExp)*;

/* The arithmetic expressions. They all have the same priority */
ArithmeticExp returns ConstraintExp
 : BasicExp ({ArithmeticExp.left = current} operator = ('+' | '-') right = BasicExp)*;

 BasicExp returns ConstraintExp
  : {NeverTypeOf} 'neverTypeOf' '[' var = ID ',' varType = JvmTypeReference ']'
  | {NoCallTo} 'noCallTo' '[' method = ID ']'
  | {CallTo} 'callTo' '[' method = ID ']'
  | {NotHardCoded} 'notHardCoded' '[' var = ID "]"
  | {Length} 'length' '[' var = ID ']'
  | {InstanceOf} 'instanceOf' '[' var = ID ',' varType = JvmTypeReference ']'
  |	{InSet} left = AtomicConstraintExp 'in' literalSet = LiteralSet
  | {AtomicConstraint} exp = AtomicConstraintExp
  ;
 
AtomicConstraintExp 
 : {Value} exp = Value
 | {Brackets} '(' exp = ConstraintExp ')'
 | {FunctionCall} methodName=ID '(' params += Value (',' params += Value)* ')' 
 ;  
  
 LiteralSet 
  : {LiteralSet} set = '{' values += Value (',' values += Value)* '}'
  | {MetaVariable} var = MetaVariable	
  ;
 
 MetaVariable : '${' ID '}';
 
 Value 
  : {IntValue} value = NUMBER 
  | {StringValue} value = STRING
  | {Variable} varName = ID	
  ;

/* RequireSpec rule
 * 
*/
RequireSpec : {RequireSpec} 'REQUIRES' requires += RequirePredicate+;

RequirePredicate : exp = PredicateOr ';';

PredicateOr returns PredicateExp 
	: AtomicPredicate ({PredicateOr.leftExpression = current} '||' right = AtomicPredicate)*;

AtomicPredicate: 
	(cons = (ConstraintExp | Pred) "=>")? (not = '!')? pred = Pred;
	
Pred:
	name = ID '[' (params = PredParams) ']';
	
PredParams:
	(parameters += PredParameter (',' parameters += PredParameter)*);

PredParameter
: {PredValue} val = Value
| {PredWildcard} '_' 
| {PredThis} 'this'
; 

/* EnsureSpec rule
 * 
*/
EnsureSpec : {EnsureSpec} 'ENSURES' ensures += EnsurePredicate+;

EnsurePredicate:
	predicate = AtomicPredicate ('after' label = ID)? ';';

/* NegatesSpec rule
 * 
*/
NegateSpec : {NegateSpec} 'NEGATES' negates += EnsurePredicate+;
 

/* Refinement rule 
 * 
 * We can also specify refinements in MetaCrySL. 
 */	

@Override 
QualifiedName: ID ('.' ID)* ;

Refinement
  : "SPEC" name = ID "REFINES" type = QualifiedName "{" refinements += RefinementOpr+ "}"; 
 
 
 RefinementOpr 
  : {Rename} "rename" "spec" type = QualifiedName ";"
  | {AddEvent} "add" "event" event = Event ";"
  | {AddConstraint} "add" "constraint" constraint = ConstraintExp ";"
  | {AddRequire} "add" "require" require = RequirePredicate ";"
  | {AddEnsure} "add" "ensure" ensure = EnsurePredicate ";"
  | {DefineLiteralSet} "define" var = ID "=" set = LiteralSet ";"  	
  ;  

Configuration 
  : "CONFIG" config = ID "{" 
  	  'inputDir'  '=' inputDir  = STRING ";" 
  	  'outputDir'  '=' outputDir  = STRING ";" 
  	  modules += LoadModule+
  "}";
 
LoadModule
 :  "load" module = STRING ";" ;

terminal NUMBER : ('0'..'9')*;
